---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kute.
--- DateTime: 2019/11/25 13:20
---
--- ip 黑名单判断
---

local config = require("lapis.config").get()
ngx.log(ngx.ERR, "redis hot=" .. config.redis_config.host .. ", port=" .. config.redis_config.port)

local redis = require("util.redis-util"):new({
    host = config.redis_config.host,
    port = config.redis_config.port,
    db_index = config.redis_config.db_index,
    password = config.redis_config.password,
    timeout = config.redis_config.timeout,
    keepalive = config.redis_config.keepalive,
    pool_size = config.redis_config.pool_size
})

local ip_util = require("util.ip_util")
local response = require("util.ngx_response_util")

local ip_blacklist_config = config.ip_blacklist_config

local uri = ngx.var.request_uri
local url = ngx.var.host .. uri

-- 判断是否是白名单
function is_whitelist(ip)
    local whitelist_config = ip_blacklist_config.whitelist
    if ip then
        local whitelist_key = whitelist_config.whitelist_cache_key
        local exists = redis:sismember(whitelist_key, ip)
        if tonumber(exists) == 1 then
            return true
        end
        return false
    end
    return false
end

local ip = ip_util.get_client_ip()
ngx.log(ngx.ERR, "access url=" .. url .. " by ip=" .. ip)

if not ip or "unknown" == ip then
    ngx.log(ngx.ERR, "cannot get client ip for url=" .. url)
    response:exit(response.code_message["NOT_FOUND_CLIENT_IP"])
elseif is_whitelist(ip) then
    ngx.log(ngx.ERR, "access url=" .. url .. "by whitelist ip=" .. ip)
else
    -- ip frequent
    local blacklist_config = ip_blacklist_config.blacklist
    local blacklist_count_key = blacklist_config.blacklist_count_prefix .. ip
    local count_value = redis:get(blacklist_count_key)
    if not count_value then
        ngx.log(ngx.ERR, "access url=" .. url .. "by ip=" .. ip .. " init 1")
        redis:set(blacklist_count_key, 1)
        redis:expire(blacklist_count_key, blacklist_config.expired)
    elseif tonumber(count_value) >= ip_blacklist_config.limit then
        ngx.log(ngx.ERR, "forbidden access url=" .. url .. "  by ip=" .. ip)
        response:exit(response.code_message["FORBIDDEN"])
    else
        local after_count = redis:incr(blacklist_count_key)
        ngx.log(ngx.ERR, "access url=" .. url .. "by ip=" .. ip .. " already for " .. tostring(after_count))
    end
end


