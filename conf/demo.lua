---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kute.
--- DateTime: 2019/11/21 17:27
---

local lapis = require("lapis")
local respond_to = require("lapis.application").respond_to
local app = lapis.Application()

-- before filter，在任何请求前执行，当 遇到 self.write时，则不会继续走下面请求
app:before_filter(function(self)
    if not self.id then
        self.id = "998"
    end
    if not self.user then
        -- 跳转到登录路由，下面不会继续执行
        self:write({ redirect_to = self:url_for("login") })
    end
end)

-- routes 路由

-- 命名参数
app:match("/light/api/test/:name/count", function(self)
    ngx.log(ngx.ERR, "name=", self.params.name)
end)

-- 可选匹配
app:match("/light/api/test/:name/count(/extra)", function(self)
    ngx.log(ngx.ERR, "name=", self.params.name)
end)

-- 可选匹配多层嵌套
app:match("/light/api/test/:name/count(/extra(/:pv))", function(self)
    ngx.log(ngx.ERR, "name=", self.params.name, self.params.pv)
end)

-- 参数 类型 限定: ucid只能是数字
app:match("/light/api/test/:ucid[%d]/count", function(self)
    ngx.log(ngx.ERR, "name=", self.params.name)
end)

-- 给路由定义name，方便其他路由跳转时 生成URL
app:match("login", "/login", function(self)
    return "Please login ...."
end)

-- 该路由name=index, 返回name=first的路由的URL，并传递first路由参数
app:match("index", "/", function(self)
    return self:url_for("first", {
        id = "998"
    })
end)
app:match("first", "/first/:id[%d]]", function(self)
    return "hello" .. self.params.id .. ", go home" .. self:url_for("index")
end)

-- 针对不同的请求方式的路由

app:match("account", "/account", respond_to({
    -- before filter
    before = function(self)
        if not self.user then
            -- 跳转到登录路由，下面不会继续执行
            self:write({ redirect_to = self:url_for("login") })
        end
    end,
    -- 针对 /account的get请求时的处理
    GET = function(self)
        return "deal get request"
    end,
    -- 针对 /account的post方式处理
    POST = function(self)
        return "deal post request"
    end
}))

-- render
-- return json
app:get("/json", function(self)
    return {
        json = {
            hello = "world"
        }
    }
end)

-- 默认路由的默认实现，app:default_route 以及 app.handle_404 函数可以被覆盖重写
function app:default_route()
    -- strip trailing /
    if self.req.parsed_url.path:match("./$") then
        local stripped = self.req.parsed_url:match("^(.+)/+$")
        return {
            redirect_to = self:build_url(stripped, {
                status = 301,
                query = self.req.parsed_url.query,
            })
        }
    else
        self.app.handle_404(self)
    end
end

return app